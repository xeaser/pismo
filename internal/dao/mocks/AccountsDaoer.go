// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/xeaser/pismo/internal/models"
)

// AccountsDaoer is an autogenerated mock type for the AccountsDaoer type
type AccountsDaoer struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: account
func (_m *AccountsDaoer) CreateAccount(account *models.Account) (int, error) {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Account) (int, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*models.Account) int); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: transaction
func (_m *AccountsDaoer) CreateTransaction(transaction *models.Transaction) (int, error) {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Transaction) (int, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(*models.Transaction) int); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountById provides a mock function with given fields: id
func (_m *AccountsDaoer) GetAccountById(id int) (*models.Account, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountById")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields:
func (_m *AccountsDaoer) GetAccounts() ([]*models.Account, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 []*models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: id
func (_m *AccountsDaoer) GetTransactionById(id int) (*models.Transaction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionById")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: filters
func (_m *AccountsDaoer) GetTransactions(filters ...models.TransactionOption) ([]*models.Transaction, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []*models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(...models.TransactionOption) ([]*models.Transaction, error)); ok {
		return rf(filters...)
	}
	if rf, ok := ret.Get(0).(func(...models.TransactionOption) []*models.Transaction); ok {
		r0 = rf(filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(...models.TransactionOption) error); ok {
		r1 = rf(filters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountsDaoer creates a new instance of AccountsDaoer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountsDaoer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountsDaoer {
	mock := &AccountsDaoer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
